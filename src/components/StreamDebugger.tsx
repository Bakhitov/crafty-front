'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { usePlaygroundStore } from '@/store'
import { constructEndpointUrl } from '@/lib/constructEndpointUrl'
import { useAuthContext } from '@/components/AuthProvider'

export const StreamDebugger = () => {
  const [logs, setLogs] = useState<string[]>([])
  const [isTestRunning, setIsTestRunning] = useState(false)
  const [agentId, setAgentId] = useState('test_dynamic_agent')
  const [userId, setUserId] = useState('')
  const selectedEndpoint = usePlaygroundStore((state) => state.selectedEndpoint)
  const { user } = useAuthContext()

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString()
    setLogs((prev) => [...prev, `[${timestamp}] ${message}`])
    console.log(`[StreamDebugger] ${message}`)
  }

  const testAgnoStream = async () => {
    const currentUserId = userId || user?.id || 'test-user'

    setIsTestRunning(true)
    setLogs([])

    try {
      const endpointUrl = constructEndpointUrl(selectedEndpoint)
      const agnoApiUrl = `${endpointUrl}/v1/agents/${agentId}/runs`

      addLog(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–∞`)
      addLog(`üì° URL: ${agnoApiUrl}`)
      addLog(`ü§ñ Agent ID: ${agentId}`)
      addLog(`üë§ User ID: ${currentUserId}`)

      const formData = new FormData()
      formData.append('message', '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–∞.')
      formData.append('user_id', currentUserId)
      formData.append('stream', 'true')
      formData.append('session_id', `test-${Date.now()}`)

      addLog(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...`)

      const response = await fetch(agnoApiUrl, {
        method: 'POST',
        body: formData
      })

      addLog(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`)
      addLog(
        `üìã Headers: ${JSON.stringify(Object.fromEntries(response.headers.entries()))}`
      )

      if (!response.ok) {
        const errorText = await response.text()
        addLog(`‚ùå –û—à–∏–±–∫–∞ HTTP: ${errorText}`)
        return
      }

      if (!response.body) {
        addLog(`‚ùå –ù–µ—Ç —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞`)
        return
      }

      const reader = response.body.getReader()
      const decoder = new TextDecoder()
      let chunkCount = 0
      let buffer = ''

      addLog(`üåä –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞...`)

      while (true) {
        const { done, value } = await reader.read()

        if (done) {
          if (buffer.trim()) {
            addLog(
              `‚ö†Ô∏è –û—Å—Ç–∞–ª—Å—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä: ${buffer.substring(0, 100)}...`
            )
          }
          addLog(`‚úÖ –°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${chunkCount}`)
          break
        }

        chunkCount++
        buffer += decoder.decode(value, { stream: true })
        addLog(
          `üì¶ –ß–∞–Ω–∫ ${chunkCount}: ${value.length} –±–∞–π—Ç, –±—É—Ñ–µ—Ä: ${buffer.length} —Å–∏–º–≤–æ–ª–æ–≤`
        )

        // –ò—â–µ–º –ø–æ–ª–Ω—ã–µ JSON –æ–±—ä–µ–∫—Ç—ã –≤ –±—É—Ñ–µ—Ä–µ
        let startIndex = 0

        while (startIndex < buffer.length) {
          const jsonStart = buffer.indexOf('{', startIndex)
          if (jsonStart === -1) break

          let braceCount = 0
          let jsonEnd = -1
          let inString = false
          let escapeNext = false

          for (let i = jsonStart; i < buffer.length; i++) {
            const char = buffer[i]

            if (escapeNext) {
              escapeNext = false
              continue
            }

            if (char === '\\') {
              escapeNext = true
              continue
            }

            if (char === '"') {
              inString = !inString
              continue
            }

            if (!inString) {
              if (char === '{') {
                braceCount++
              } else if (char === '}') {
                braceCount--
                if (braceCount === 0) {
                  jsonEnd = i
                  break
                }
              }
            }
          }

          if (jsonEnd === -1) {
            // JSON –Ω–µ–ø–æ–ª–Ω—ã–π
            break
          }

          const jsonStr = buffer.substring(jsonStart, jsonEnd + 1)

          try {
            const event = JSON.parse(jsonStr)
            addLog(
              `üì® –°–æ–±—ã—Ç–∏–µ: ${event.event} ${event.content ? '(content: ' + event.content.substring(0, 50) + '...)' : ''}`
            )
          } catch {
            addLog(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: ${jsonStr.substring(0, 100)}...`)
          }

          startIndex = jsonEnd + 1
        }

        buffer = buffer.substring(startIndex)
      }
    } catch (error) {
      addLog(
        `üí• –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
      )
    } finally {
      setIsTestRunning(false)
    }
  }

  const clearLogs = () => {
    setLogs([])
  }

  return (
    <div className="space-y-4 rounded-lg border p-4">
      <div className="space-y-3">
        <div className="grid grid-cols-2 gap-2">
          <div>
            <label className="text-sm font-medium">Agent ID:</label>
            <Input
              value={agentId}
              onChange={(e) => setAgentId(e.target.value)}
              placeholder="test_dynamic_agent"
            />
          </div>
          <div>
            <label className="text-sm font-medium">
              User ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
            </label>
            <Input
              value={userId}
              onChange={(e) => setUserId(e.target.value)}
              placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
            />
          </div>
        </div>

        <div className="flex gap-2">
          <Button
            onClick={testAgnoStream}
            disabled={isTestRunning}
            variant="outline"
          >
            {isTestRunning ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–∞'}
          </Button>
          <Button onClick={clearLogs} variant="outline">
            –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
          </Button>
        </div>
      </div>

      <div className="max-h-96 overflow-y-auto rounded bg-gray-100 p-3 dark:bg-gray-800">
        <div className="space-y-1 font-mono text-sm">
          {logs.length === 0 ? (
            <div className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</div>
          ) : (
            logs.map((log, index) => (
              <div key={index} className="whitespace-pre-wrap break-words">
                {log}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  )
}
