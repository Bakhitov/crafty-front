import { useCallback, useRef } from 'react'
import { toast } from 'sonner'
import { usePlaygroundStore } from '@/store'
import { useCompany } from './useCompany'
import { useAgents } from './useAgents'
import { transformAPIAgentsToCombobox } from '@/lib/apiClient'
import { ComboboxAgent, type PlaygroundChatMessage } from '@/types/playground'
import { getCachedHealthCheck } from '@/lib/requestCache'

const useChatActions = () => {
  const {
    setIsEndpointActive,
    setIsEndpointLoading,
    setAgents,
    // setSelectedModel, // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    // setSelectedAgent, // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    // setHasStorage, // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ store –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    setCurrentCompanyId,
    selectedEndpoint,
    chatInputRef,
    setMessages,
    isAgentSwitching,
    setIsAgentSwitching
  } = usePlaygroundStore()
  const { company } = useCompany()
  const { agents: supabaseAgents, refreshAgents } = useAgents()

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
  const initializationRef = useRef<{
    isInitializing: boolean
    lastEndpoint: string | null
    lastCompanyId: string | null
  }>({
    isInitializing: false,
    lastEndpoint: null,
    lastCompanyId: null
  })

  const getStatus = useCallback(async () => {
    if (!selectedEndpoint) return 503

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π health check
      return await getCachedHealthCheck(selectedEndpoint)
    } catch {
      return 503
    }
  }, [selectedEndpoint])

  const getAgents = useCallback(async (): Promise<ComboboxAgent[]> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ Supabase
      return transformAPIAgentsToCombobox(supabaseAgents)
    } catch (err) {
      console.error('Error transforming agents:', err)
      toast.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤')
      return []
    }
  }, [supabaseAgents])

  const refreshAgentsList = useCallback(async () => {
    try {
      console.log('useChatActions: Starting agents list refresh...')

      // Force refresh agents from Supabase with cache invalidation
      const freshAgents = await refreshAgents()
      console.log('useChatActions: Got fresh agents:', freshAgents?.length || 0)

      // Tr–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ refreshAgents
      const agents = transformAPIAgentsToCombobox(freshAgents || [])
      console.log('useChatActions: Transformed agents:', agents.length)

      // Update the store
      setAgents(agents)

      console.log('useChatActions: Successfully refreshed agents list')
      return agents
    } catch (error) {
      console.error('Error refreshing agents list:', error)
      toast.error('Failed to refresh agents list')
      return []
    }
  }, [refreshAgents, setAgents])

  const clearChat = useCallback(() => {
    console.log('üßπ useChatActions: Clearing chat messages')

    // –ï–¥–∏–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ setState
    usePlaygroundStore.setState({
      messages: [],
      isSessionLoading: false
    })

    console.log('‚úÖ useChatActions: Chat cleared successfully')
  }, [])

  const startAgentSwitch = useCallback(() => {
    console.log('üîÑ useChatActions: Starting agent switch')
    setIsAgentSwitching(true)

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('üßπ useChatActions: Force clearing chat for agent switch')

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ setState –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    usePlaygroundStore.setState({
      messages: [],
      isSessionLoading: false
    })

    console.log('‚úÖ useChatActions: Chat cleared for agent switch')
  }, [setIsAgentSwitching])

  const completeAgentSwitch = useCallback(() => {
    console.log('‚úÖ useChatActions: Completing agent switch')
    setIsAgentSwitching(false)
  }, [setIsAgentSwitching])

  const focusChatInput = useCallback(() => {
    setTimeout(() => {
      requestAnimationFrame(() => chatInputRef?.current?.focus())
    }, 0)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const addMessage = useCallback(
    (message: PlaygroundChatMessage) => {
      setMessages((prevMessages) => [...prevMessages, message])
    },
    [setMessages]
  )

  const initializePlayground = useCallback(async () => {
    console.log('useChatActions: Starting initializePlayground')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ endpoint —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!selectedEndpoint) {
      console.log(
        'useChatActions: No endpoint selected, skipping initialization'
      )
      return
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
    // –∏–ª–∏ –µ—Å–ª–∏ endpoint –∏ company –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    const currentCompanyId = company?.id || null
    if (
      initializationRef.current.isInitializing ||
      (initializationRef.current.lastEndpoint === selectedEndpoint &&
        initializationRef.current.lastCompanyId === currentCompanyId)
    ) {
      console.log(
        'useChatActions: Initialization already in progress or no changes detected, skipping'
      )
      return
    }

    initializationRef.current.isInitializing = true
    initializationRef.current.lastEndpoint = selectedEndpoint
    initializationRef.current.lastCompanyId = currentCompanyId

    setIsEndpointLoading(true)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º company_id –≤ —Å—Ç–æ—Ä –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if (company?.id) {
      setCurrentCompanyId(company.id)
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Agno —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è —á–∞—Ç–∞)
      console.log('useChatActions: Checking Agno endpoint status...')
      const status = await getStatus()

      if (status === 200) {
        console.log('useChatActions: Agno endpoint is active')
        setIsEndpointActive(true)
      } else {
        console.log(
          'useChatActions: Agno endpoint is not active, status:',
          status
        )
        setIsEndpointActive(false)
      }
    } catch (error) {
      console.error('useChatActions: Error during initialization:', error)
      setIsEndpointActive(false)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Agno —Å–µ—Ä–≤–µ—Ä–∞')
    } finally {
      setIsEndpointLoading(false)
      initializationRef.current.isInitializing = false
    }
  }, [
    selectedEndpoint,
    company?.id,
    setIsEndpointLoading,
    setCurrentCompanyId,
    getStatus,
    setIsEndpointActive
  ])

  return {
    getStatus,
    getAgents,
    refreshAgentsList,
    clearChat,
    focusChatInput,
    addMessage,
    initializePlayground,
    startAgentSwitch,
    completeAgentSwitch,
    isAgentSwitching
  }
}

export default useChatActions
