import { useCallback } from 'react'
import type { AgnoStreamEvent } from '@/types/playground'

/**
 * –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Agno API
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
export default function useAgnoResponseStream() {
  const streamResponse = useCallback(
    async (options: {
      apiUrl: string
      headers?: Record<string, string>
      requestBody: FormData
      onChunk: (chunk: AgnoStreamEvent) => void
      onError: (error: Error) => void
      onComplete: () => void
      abortController?: AbortController
    }): Promise<void> => {
      const {
        apiUrl,
        headers = {},
        requestBody,
        onChunk,
        onError,
        onComplete,
        abortController
      } = options

      try {
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            // –î–ª—è FormData –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type
            ...headers
          },
          body: requestBody,
          credentials: 'include', // –í–∫–ª—é—á–∞–µ–º cookies –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          signal: abortController?.signal
        })

        if (!response.ok) {
          let errorMessage = `HTTP ${response.status}: ${response.statusText}`
          try {
            const errorData = await response.json()
            errorMessage = errorData.detail || errorMessage
          } catch {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
          }
          throw new Error(errorMessage)
        }

        if (!response.body) {
          throw new Error('No response body')
        }

        const reader = response.body.getReader()
        const decoder = new TextDecoder()
        let buffer = '' // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º while loop –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞
        while (true) {
          const { done, value } = await reader.read()

          if (done) {
            onComplete()
            break
          }

          // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          const chunk = decoder.decode(value, { stream: true })
          buffer += chunk

          let startIndex = 0

          while (startIndex < buffer.length) {
            // –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON –æ–±—ä–µ–∫—Ç–∞
            const jsonStart = buffer.indexOf('{', startIndex)

            if (jsonStart === -1) {
              // JSON –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
              break
            }

            // –ò—â–µ–º –∫–æ–Ω–µ—Ü JSON –æ–±—ä–µ–∫—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
            let braceCount = 0
            let jsonEnd = -1
            let inString = false
            let escapeNext = false

            for (let i = jsonStart; i < buffer.length; i++) {
              const char = buffer[i]

              if (escapeNext) {
                escapeNext = false
                continue
              }

              if (char === '\\') {
                escapeNext = true
                continue
              }

              if (char === '"' && !escapeNext) {
                inString = !inString
                continue
              }

              if (!inString) {
                if (char === '{') {
                  braceCount++
                } else if (char === '}') {
                  braceCount--
                  if (braceCount === 0) {
                    jsonEnd = i
                    break
                  }
                }
              }
            }

            if (jsonEnd === -1) {
              // JSON –æ–±—ä–µ–∫—Ç –Ω–µ–ø–æ–ª–Ω—ã–π, –∂–¥–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
              break
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç
            const jsonStr = buffer.substring(jsonStart, jsonEnd + 1)

            try {
              const event: AgnoStreamEvent = JSON.parse(jsonStr)
              onChunk(event)
            } catch (parseError) {
              console.warn(
                'Failed to parse Agno stream event:',
                jsonStr.substring(0, 200),
                parseError
              )
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ JSON –æ–±—ä–µ–∫—Ç–∞
            startIndex = jsonEnd + 1
          }

          // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —á–∞—Å—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞
          buffer = buffer.substring(startIndex)
        }
      } catch (error) {
        if (error instanceof Error && error.name === 'AbortError') {
          console.log('üõë –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω')
          return
        }
        onError(error instanceof Error ? error : new Error(String(error)))
      }
    },
    []
  )

  return { streamResponse }
}
