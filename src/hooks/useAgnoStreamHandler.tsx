import { useCallback, useState } from 'react'
import { toast } from 'sonner'
import { useQueryState } from 'nuqs'
import { v4 as uuidv4 } from 'uuid'

import { usePlaygroundStore } from '../store'
import useChatActions from '@/hooks/useChatActions'
import useSessionLoader from '@/hooks/useSessionLoader'
import { useAuthContext } from '@/components/AuthProvider'
import useAgnoResponseStream from './useAgnoResponseStream'
import { useAgents } from './useAgents'
import type { AgnoStreamEvent } from '@/types/playground'
import { constructEndpointUrl } from '@/lib/constructEndpointUrl'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É uuid –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
 */
const generateSessionId = (): string => {
  return uuidv4()
}

/**
 * –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ —Å Agno API
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ Agno API —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const useAgnoStreamHandler = () => {
  const setMessages = usePlaygroundStore((state) => state.setMessages)
  const { addMessage, focusChatInput } = useChatActions()
  const { autoRenameSession } = useSessionLoader()
  const { getAgent } = useAgents()
  const [agentId] = useQueryState('agent')
  const [sessionId, setSessionId] = useQueryState('session')
  const selectedEndpoint = usePlaygroundStore((state) => state.selectedEndpoint)
  const setStreamingErrorMessage = usePlaygroundStore(
    (state) => state.setStreamingErrorMessage
  )
  const setIsStreaming = usePlaygroundStore((state) => state.setIsStreaming)
  const setSessionsData = usePlaygroundStore((state) => state.setSessionsData)
  const hasStorage = usePlaygroundStore((state) => state.hasStorage)
  const { streamResponse } = useAgnoResponseStream()
  const { user } = useAuthContext()

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è run_id –∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤
  const [currentRunId, setCurrentRunId] = useState<string | null>(null)
  const [abortController, setAbortController] =
    useState<AbortController | null>(null)

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: agent_config.stream > –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
   */
  const getStreamSetting = useCallback(async (): Promise<boolean> => {
    if (!agentId) return true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é stream=true

    try {
      const agent = await getAgent(agentId)
      if (agent?.agent_config?.stream !== undefined) {
        console.log(
          'üîÑ Using stream setting from agent config:',
          agent.agent_config.stream
        )
        return agent.agent_config.stream as boolean
      }
    } catch (error) {
      console.warn(
        '‚ö†Ô∏è Failed to get agent config, using default stream=true:',
        error
      )
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é stream=true
    console.log('üîÑ Using default stream setting: true')
    return true
  }, [agentId, getAgent])

  const updateMessagesWithErrorState = useCallback(() => {
    setMessages((prevMessages) => {
      const newMessages = [...prevMessages]
      const lastMessageIndex = newMessages.length - 1
      const lastMessage = newMessages[lastMessageIndex]
      if (lastMessage && lastMessage.role === 'agent') {
        newMessages[lastMessageIndex] = {
          ...lastMessage,
          streamingError: true
        }
      }
      return newMessages
    })
  }, [setMessages])

  const handleNonStreamResponse = useCallback(
    async (input: string | FormData) => {
      if (!agentId) {
        toast.error('–ê–≥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω')
        return
      }

      if (!user?.id) {
        toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')
        return
      }

      setIsStreaming(true)
      setStreamingErrorMessage('')
      setMessages((prevMessages) => {
        const newMessages = [...prevMessages]
        const lastMessageIndex = newMessages.length - 1
        const lastMessage = newMessages[lastMessageIndex]
        if (lastMessage && lastMessage.role === 'agent') {
          newMessages[lastMessageIndex] = {
            ...lastMessage,
            streamingError: false
          }
        }
        return newMessages
      })

      const formData = input instanceof FormData ? input : new FormData()
      if (typeof input === 'string') {
        formData.append('message', input)
      }

      // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–¥–∞–µ–º user_id
      formData.append('user_id', user.id)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º session_id
      let currentSessionId = sessionId

      if (!sessionId) {
        currentSessionId = generateSessionId()

        await setSessionId(currentSessionId, {
          history: 'push',
          scroll: false,
          shallow: true
        })

        if (hasStorage) {
          const sessionEntry = {
            session_id: currentSessionId,
            title: (formData.get('message') as string) || '–ù–æ–≤—ã–π —á–∞—Ç',
            created_at: Math.floor(Date.now() / 1000)
          }
          setSessionsData((prev) => {
            const exists = prev?.some((s) => s.session_id === currentSessionId)
            if (exists) return prev
            return [sessionEntry, ...(prev ?? [])]
          })
        }
      }

      formData.append('session_id', currentSessionId || '')
      formData.append('stream', 'false') // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∏–º

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const messageContent = (formData.get('message') as string) || ''
      addMessage({
        role: 'user',
        content: messageContent,
        created_at: Math.floor(Date.now() / 1000)
      })

      try {
        const endpointUrl = constructEndpointUrl(selectedEndpoint)
        const agnoApiUrl = `${endpointUrl}/v1/agents/${agentId}/runs`

        const response = await fetch(agnoApiUrl, {
          method: 'POST',
          body: formData
        })

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`)
        }

        const result = await response.json()

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
        addMessage({
          role: 'agent',
          content: result.content || '',
          created_at: result.created_at || Math.floor(Date.now() / 1000),
          images: result.images,
          videos: result.videos,
          audio: result.audio,
          response_audio: result.response_audio
        })
      } catch (error) {
        console.error('üí• Error in non-stream handler:', error)
        updateMessagesWithErrorState()
        setStreamingErrorMessage(
          error instanceof Error ? error.message : String(error)
        )
      } finally {
        focusChatInput()
        setIsStreaming(false)
      }
    },
    [
      setMessages,
      addMessage,
      updateMessagesWithErrorState,
      selectedEndpoint,
      agentId,
      setStreamingErrorMessage,
      setIsStreaming,
      focusChatInput,
      setSessionsData,
      sessionId,
      setSessionId,
      hasStorage,
      user?.id
    ]
  )

  const handleStreamResponse = useCallback(
    async (input: string | FormData) => {
      if (!agentId) {
        toast.error('–ê–≥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω')
        return
      }

      if (!user?.id) {
        toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')
        return
      }

      setIsStreaming(true)
      setStreamingErrorMessage('')
      setMessages((prevMessages) => {
        const newMessages = [...prevMessages]
        const lastMessageIndex = newMessages.length - 1
        const lastMessage = newMessages[lastMessageIndex]
        if (lastMessage && lastMessage.role === 'agent') {
          newMessages[lastMessageIndex] = {
            ...lastMessage,
            streamingError: false
          }
        }
        return newMessages
      })

      const formData = input instanceof FormData ? input : new FormData()
      if (typeof input === 'string') {
        formData.append('message', input)
      }

      // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–¥–∞–µ–º user_id
      formData.append('user_id', user.id)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º session_id
      let currentSessionId = sessionId
      let isNewSession = false

      if (!sessionId) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        currentSessionId = generateSessionId()
        isNewSession = true

        console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é:', {
          user_id: user.id,
          agent_id: agentId,
          new_session_id: currentSessionId
        })

        await setSessionId(currentSessionId, {
          history: 'push',
          scroll: false,
          shallow: true
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        if (hasStorage) {
          const sessionEntry = {
            session_id: currentSessionId,
            title: (formData.get('message') as string) || '–ù–æ–≤—ã–π —á–∞—Ç',
            created_at: Math.floor(Date.now() / 1000)
          }
          setSessionsData((prev) => {
            const exists = prev?.some((s) => s.session_id === currentSessionId)
            if (exists) return prev
            return [sessionEntry, ...(prev ?? [])]
          })
        }
      } else {
        console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é:', {
          user_id: user.id,
          agent_id: agentId,
          existing_session_id: currentSessionId
        })
      }

      // –ü–µ—Ä–µ–¥–∞–µ–º session_id (–Ω–æ–≤—ã–π –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
      formData.append('session_id', currentSessionId || '')

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Agno API
      formData.append('stream', 'true')

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
      setMessages((prevMessages) => {
        if (prevMessages.length >= 2) {
          const lastMessage = prevMessages[prevMessages.length - 1]
          const secondLastMessage = prevMessages[prevMessages.length - 2]
          if (
            lastMessage.role === 'agent' &&
            lastMessage.streamingError &&
            secondLastMessage.role === 'user'
          ) {
            return prevMessages.slice(0, -2)
          }
        }
        return prevMessages
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const messageContent = (formData.get('message') as string) || ''
      addMessage({
        role: 'user',
        content: messageContent,
        created_at: Math.floor(Date.now() / 1000)
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
      addMessage({
        role: 'agent',
        content: '',
        tool_calls: [],
        streamingError: false,
        created_at: Math.floor(Date.now() / 1000) + 1
      })

      let currentContent = ''
      let responseSessionId = currentSessionId

      // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
      const controller = new AbortController()
      setAbortController(controller)

      try {
        const endpointUrl = constructEndpointUrl(selectedEndpoint)
        const agnoApiUrl = `${endpointUrl}/v1/agents/${agentId}/runs`

        console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Agno API:', {
          url: agnoApiUrl,
          user_id: user.id,
          session_id: currentSessionId,
          agent_id: agentId,
          message: formData.get('message') || '',
          is_new_session: isNewSession
        })

        await streamResponse({
          apiUrl: agnoApiUrl,
          requestBody: formData,
          abortController: controller,
          onChunk: (chunk: AgnoStreamEvent) => {
            console.log('üì® Agno event:', chunk.event, chunk)

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if (!chunk.event) {
              console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –ø–æ–ª—è event:', chunk)
              return
            }

            switch (chunk.event) {
              case 'RunStarted':
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º run_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
                if (chunk.run_id) {
                  setCurrentRunId(chunk.run_id)
                  console.log('üöÄ RunStarted - Run ID:', chunk.run_id)
                }

                if (chunk.session_id) {
                  responseSessionId = chunk.session_id
                  console.log('üöÄ RunStarted - Session ID:', chunk.session_id)

                  // –û–±–Ω–æ–≤–ª—è–µ–º session_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
                  if (chunk.session_id !== currentSessionId) {
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º session_id:', {
                      sent: currentSessionId,
                      received: chunk.session_id
                    })
                    setSessionId(chunk.session_id)
                  }

                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
                  if (hasStorage && isNewSession) {
                    const userMessage =
                      (formData.get('message') as string) || '–ù–æ–≤—ã–π —á–∞—Ç'
                    const sessionData = {
                      session_id: chunk.session_id,
                      title: userMessage,
                      created_at: chunk.created_at
                    }
                    setSessionsData((prevSessionsData) => {
                      const sessionExists = prevSessionsData?.some(
                        (session) => session.session_id === chunk.session_id
                      )
                      if (sessionExists) {
                        return prevSessionsData
                      }
                      return [sessionData, ...(prevSessionsData ?? [])]
                    })

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (
                      agentId &&
                      userMessage &&
                      userMessage !== '–ù–æ–≤—ã–π —á–∞—Ç' &&
                      chunk.session_id
                    ) {
                      console.log(
                        'üè∑Ô∏è Auto-renaming new session with user message'
                      )
                      setTimeout(() => {
                        if (agentId && chunk.session_id) {
                          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è TypeScript
                          autoRenameSession(
                            agentId,
                            chunk.session_id,
                            userMessage
                          )
                        }
                      }, 1000) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    }
                  }
                }
                break

              case 'RunResponseContent':
                if (chunk.content) {
                  currentContent += chunk.content
                  setMessages((prevMessages) => {
                    const newMessages = [...prevMessages]
                    const lastMessageIndex = newMessages.length - 1
                    const lastMessage = newMessages[lastMessageIndex]

                    if (lastMessage && lastMessage.role === 'agent') {
                      newMessages[lastMessageIndex] = {
                        ...lastMessage,
                        content: currentContent,
                        created_at: chunk.created_at ?? lastMessage.created_at,
                        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Agno API
                        ...(chunk.images && { images: chunk.images }),
                        ...(chunk.videos && { videos: chunk.videos }),
                        ...(chunk.audio && { audio: chunk.audio }),
                        ...(chunk.response_audio && {
                          response_audio: chunk.response_audio
                        })
                      }
                    }
                    return newMessages
                  })
                }
                break

              case 'ToolCallStarted':
                if (chunk.tool_name) {
                  console.log('üîß ToolCallStarted:', chunk.tool_name)
                  setMessages((prevMessages) => {
                    const newMessages = [...prevMessages]
                    const lastMessageIndex = newMessages.length - 1
                    const lastMessage = newMessages[lastMessageIndex]

                    if (lastMessage && lastMessage.role === 'agent') {
                      const newToolCall = {
                        tool_name: chunk.tool_name!,
                        tool_input: chunk.tool_input,
                        created_at: chunk.created_at,
                        status: 'running' as const
                      }

                      newMessages[lastMessageIndex] = {
                        ...lastMessage,
                        tool_calls: [
                          ...(lastMessage.tool_calls || []),
                          newToolCall
                        ]
                      }
                    }
                    return newMessages
                  })
                }
                break

              case 'ToolCallCompleted':
                if (chunk.tool_name) {
                  console.log('‚úÖ ToolCallCompleted:', chunk.tool_name)
                  setMessages((prevMessages) => {
                    const newMessages = [...prevMessages]
                    const lastMessageIndex = newMessages.length - 1
                    const lastMessage = newMessages[lastMessageIndex]

                    if (
                      lastMessage &&
                      lastMessage.role === 'agent' &&
                      lastMessage.tool_calls
                    ) {
                      const updatedToolCalls = lastMessage.tool_calls.map(
                        (tc) =>
                          tc.tool_name === chunk.tool_name &&
                          tc.status === 'running'
                            ? {
                                ...tc,
                                tool_output: chunk.tool_output,
                                status: 'completed' as const
                              }
                            : tc
                      )

                      newMessages[lastMessageIndex] = {
                        ...lastMessage,
                        tool_calls: updatedToolCalls
                      }
                    }
                    return newMessages
                  })
                }
                break

              case 'RunCompleted':
                console.log('üèÅ RunCompleted')
                setMessages((prevMessages) => {
                  const newMessages = [...prevMessages]
                  const lastMessageIndex = newMessages.length - 1
                  const lastMessage = newMessages[lastMessageIndex]

                  if (lastMessage && lastMessage.role === 'agent') {
                    newMessages[lastMessageIndex] = {
                      ...lastMessage,
                      content: currentContent || lastMessage.content,
                      created_at: chunk.created_at ?? lastMessage.created_at,
                      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Agno API
                      ...(chunk.images && { images: chunk.images }),
                      ...(chunk.videos && { videos: chunk.videos }),
                      ...(chunk.audio && { audio: chunk.audio }),
                      ...(chunk.response_audio && {
                        response_audio: chunk.response_audio
                      })
                    }
                  }
                  return newMessages
                })
                break

              case 'RunError':
                console.error('‚ùå RunError:', chunk.content, chunk.error_type)
                updateMessagesWithErrorState()
                const errorContent =
                  chunk.content || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞'
                setStreamingErrorMessage(errorContent)

                // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
                if (hasStorage && isNewSession && responseSessionId) {
                  setSessionsData(
                    (prevSessionsData) =>
                      prevSessionsData?.filter(
                        (session) => session.session_id !== responseSessionId
                      ) ?? null
                  )
                }
                break

              case 'ReasoningStarted':
                console.log('ü§î ReasoningStarted')
                break

              case 'ReasoningStep':
                console.log('üí≠ ReasoningStep')
                break

              default:
                console.log('‚ùì Unhandled Agno event:', chunk.event)
            }
          },
          onError: (error) => {
            console.error('üí• Agno stream error:', error)
            updateMessagesWithErrorState()
            setStreamingErrorMessage(error.message)

            // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
            if (hasStorage && isNewSession && responseSessionId) {
              setSessionsData(
                (prevSessionsData) =>
                  prevSessionsData?.filter(
                    (session) => session.session_id !== responseSessionId
                  ) ?? null
              )
            }
          },
          onComplete: () => {
            console.log('‚ú® Agno stream completed')
          }
        })
      } catch (error) {
        console.error('üí• Error in Agno stream handler:', error)
        updateMessagesWithErrorState()
        setStreamingErrorMessage(
          error instanceof Error ? error.message : String(error)
        )

        // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
        if (hasStorage && isNewSession && responseSessionId) {
          setSessionsData(
            (prevSessionsData) =>
              prevSessionsData?.filter(
                (session) => session.session_id !== responseSessionId
              ) ?? null
          )
        }
      } finally {
        focusChatInput()
        setIsStreaming(false)
        setAbortController(null)
      }
    },
    [
      setMessages,
      addMessage,
      updateMessagesWithErrorState,
      selectedEndpoint,
      streamResponse,
      agentId,
      setStreamingErrorMessage,
      setIsStreaming,
      focusChatInput,
      setSessionsData,
      sessionId,
      setSessionId,
      hasStorage,
      user?.id,
      setAbortController,
      setCurrentRunId,
      autoRenameSession
    ]
  )

  /**
   * –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–≥–µ–Ω—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Ç–∏–≤–Ω—ã–π Agno API
   */
  const handleContinueDialog = useCallback(
    async (runId: string, tools: unknown[] = []) => {
      if (!agentId) {
        toast.error('–ê–≥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω')
        return
      }

      if (!user?.id) {
        toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')
        return
      }

      if (!runId) {
        toast.error('Run ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞')
        return
      }

      setIsStreaming(true)
      setStreamingErrorMessage('')

      const formData = new FormData()
      formData.append('tools', JSON.stringify(tools))
      formData.append('user_id', user.id)
      formData.append('stream', 'true')

      if (sessionId) {
        formData.append('session_id', sessionId)
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
      addMessage({
        role: 'agent',
        content: '',
        tool_calls: [],
        streamingError: false,
        created_at: Math.floor(Date.now() / 1000)
      })

      let currentContent = ''

      try {
        const endpointUrl = constructEndpointUrl(selectedEndpoint)
        const continueApiUrl = `${endpointUrl}/v1/agents/${agentId}/runs/${runId}/continue`

        console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å Agno API:', {
          url: continueApiUrl,
          user_id: user.id,
          session_id: sessionId,
          agent_id: agentId,
          run_id: runId,
          tools_count: tools.length
        })

        await streamResponse({
          apiUrl: continueApiUrl,
          requestBody: formData,
          onChunk: (chunk: AgnoStreamEvent) => {
            console.log('üì® Continue event:', chunk.event, chunk)

            switch (chunk.event) {
              case 'RunStarted':
                if (chunk.run_id) {
                  setCurrentRunId(chunk.run_id)
                  console.log('üöÄ Continue RunStarted - Run ID:', chunk.run_id)
                }
                break

              case 'RunResponseContent':
                if (chunk.content) {
                  currentContent += chunk.content
                  setMessages((prevMessages) => {
                    const newMessages = [...prevMessages]
                    const lastMessageIndex = newMessages.length - 1
                    const lastMessage = newMessages[lastMessageIndex]

                    if (lastMessage && lastMessage.role === 'agent') {
                      newMessages[lastMessageIndex] = {
                        ...lastMessage,
                        content: currentContent,
                        created_at: chunk.created_at ?? lastMessage.created_at,
                        ...(chunk.images && { images: chunk.images }),
                        ...(chunk.videos && { videos: chunk.videos }),
                        ...(chunk.audio && { audio: chunk.audio }),
                        ...(chunk.response_audio && {
                          response_audio: chunk.response_audio
                        })
                      }
                    }
                    return newMessages
                  })
                }
                break

              case 'ToolCallStarted':
                if (chunk.tool_name) {
                  console.log('üîß Continue ToolCallStarted:', chunk.tool_name)
                  setMessages((prevMessages) => {
                    const newMessages = [...prevMessages]
                    const lastMessageIndex = newMessages.length - 1
                    const lastMessage = newMessages[lastMessageIndex]

                    if (lastMessage && lastMessage.role === 'agent') {
                      const newToolCall = {
                        tool_name: chunk.tool_name!,
                        tool_input: chunk.tool_input,
                        created_at: chunk.created_at,
                        status: 'running' as const
                      }

                      newMessages[lastMessageIndex] = {
                        ...lastMessage,
                        tool_calls: [
                          ...(lastMessage.tool_calls || []),
                          newToolCall
                        ]
                      }
                    }
                    return newMessages
                  })
                }
                break

              case 'ToolCallCompleted':
                if (chunk.tool_name) {
                  console.log('‚úÖ Continue ToolCallCompleted:', chunk.tool_name)
                  setMessages((prevMessages) => {
                    const newMessages = [...prevMessages]
                    const lastMessageIndex = newMessages.length - 1
                    const lastMessage = newMessages[lastMessageIndex]

                    if (
                      lastMessage &&
                      lastMessage.role === 'agent' &&
                      lastMessage.tool_calls
                    ) {
                      const updatedToolCalls = lastMessage.tool_calls.map(
                        (tc) =>
                          tc.tool_name === chunk.tool_name &&
                          tc.status === 'running'
                            ? {
                                ...tc,
                                tool_output: chunk.tool_output,
                                status: 'completed' as const
                              }
                            : tc
                      )

                      newMessages[lastMessageIndex] = {
                        ...lastMessage,
                        tool_calls: updatedToolCalls
                      }
                    }
                    return newMessages
                  })
                }
                break

              case 'RunCompleted':
                console.log('üèÅ Continue RunCompleted')
                setMessages((prevMessages) => {
                  const newMessages = [...prevMessages]
                  const lastMessageIndex = newMessages.length - 1
                  const lastMessage = newMessages[lastMessageIndex]

                  if (lastMessage && lastMessage.role === 'agent') {
                    newMessages[lastMessageIndex] = {
                      ...lastMessage,
                      content: currentContent || lastMessage.content,
                      created_at: chunk.created_at ?? lastMessage.created_at,
                      ...(chunk.images && { images: chunk.images }),
                      ...(chunk.videos && { videos: chunk.videos }),
                      ...(chunk.audio && { audio: chunk.audio }),
                      ...(chunk.response_audio && {
                        response_audio: chunk.response_audio
                      })
                    }
                  }
                  return newMessages
                })
                break

              case 'RunError':
                console.error(
                  '‚ùå Continue RunError:',
                  chunk.content,
                  chunk.error_type
                )
                updateMessagesWithErrorState()
                const errorContent =
                  chunk.content || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞'
                setStreamingErrorMessage(errorContent)
                break

              default:
                console.log('‚ùì Unhandled continue event:', chunk.event)
            }
          },
          onError: (error) => {
            console.error('üí• Continue stream error:', error)
            updateMessagesWithErrorState()
            setStreamingErrorMessage(error.message)
          },
          onComplete: () => {
            console.log('‚ú® Continue stream completed')
          }
        })
      } catch (error) {
        console.error('üí• Error in continue handler:', error)
        updateMessagesWithErrorState()
        setStreamingErrorMessage(
          error instanceof Error ? error.message : String(error)
        )
      } finally {
        focusChatInput()
        setIsStreaming(false)
      }
    },
    [
      agentId,
      user?.id,
      sessionId,
      selectedEndpoint,
      streamResponse,
      setIsStreaming,
      setStreamingErrorMessage,
      addMessage,
      setMessages,
      updateMessagesWithErrorState,
      focusChatInput
    ]
  )

  /**
   * –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞–≥–µ–Ω—Ç—É
   */
  const cancelCurrentRequest = useCallback(() => {
    if (abortController) {
      console.log('üõë –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')
      abortController.abort()
      setAbortController(null)
      setIsStreaming(false)
      setCurrentRunId(null)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ
      setMessages((prevMessages) => {
        const newMessages = [...prevMessages]
        const lastMessageIndex = newMessages.length - 1
        const lastMessage = newMessages[lastMessageIndex]
        if (
          lastMessage &&
          lastMessage.role === 'agent' &&
          lastMessage.content === ''
        ) {
          // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
          return newMessages.slice(0, -1)
        }
        return newMessages
      })

      toast.info('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω')
    }
  }, [
    abortController,
    setIsStreaming,
    setMessages,
    setCurrentRunId,
    setAbortController
  ])

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç stream/non-stream –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
   */
  const handleRequest = useCallback(
    async (input: string | FormData) => {
      if (!agentId) {
        toast.error('–ê–≥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω')
        return
      }

      if (!user?.id) {
        toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
      const shouldStream = await getStreamSetting()

      console.log('üîÑ handleRequest: Using stream mode:', shouldStream)

      if (shouldStream) {
        return handleStreamResponse(input)
      } else {
        return handleNonStreamResponse(input)
      }
    },
    [
      agentId,
      user?.id,
      getStreamSetting,
      handleStreamResponse,
      handleNonStreamResponse
    ]
  )

  return {
    handleRequest, // –ù–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
    handleStreamResponse,
    handleNonStreamResponse,
    handleContinueDialog,
    cancelCurrentRequest,
    currentRunId,
    isRequestActive: !!abortController
  }
}

export default useAgnoStreamHandler
